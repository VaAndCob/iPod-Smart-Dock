/* COMMAND LIST 

message format
Header    | length |  mode | command | parameter |   CRC  |
0xff,0x55 | 1 byte | 1byte | 2 bytes |  4 bytes  | 1 byte |

lenght = mode+command+parameter
CRC = ( (0x100 - (length+mode+command)) & 0xFF)

[MODE]
0x00 = General Lingo
0x01 = Microphone Lingo
0x02 = Simple Remote
0x03 = Display Remote
0x04 = Extended Interface
[FEED BACK]
Gives you feedback on the command you just executed.
The Command is the command that this is in response to.
0xFF,0x55,0x06,0x04,0x00,0x01 +	Result(1) + Command(2)
Result: 0=success, 2=failure, 4=you exceeded the limit of whatever you were requesting.
*/


//----------------------
//mode 0x00 = General Lingo
uint8_t CMD_ENTER_REMOTE[6] = {0xff,0x55,0x02,0x00,0x05};//enter extend remote mode
uint8_t CMD_EXIT_REMOTE[6] = {0xff,0x55,0x02,0x00,0x06};//exit extend remote mode
uint8_t REQ_IPOD_NAME[5] = {0xff,0x55,0x02,0x00,0x07};// -> 0x00,0x08
uint8_t REQ_IPOD_FWVER[5] = {0xff,0x55,0x02,0x00,0x09};// -> 0x00,0x0A
uint8_t REQ_IPOD_SERIAL[5] = {0xff,0x55,0x02,0x00,0x0B};// -> 0x00,0x0C
uint8_t REQ_IPOD_MODEL[5] = {0xff,0x55,0x02,0x00,0x0D};// -> 0x00,0x0E 
//ipod model list
String model_list[31] = {"-","-","-","iPod 3g","iPod mini","iPod 4g","iPod Color","iPod mini 2nd","-","-","-","iPod 5g"," iPod nano","-","-","-"," iPod nano 2g","iPhone","-","iPod classic"," iPod nano 3g","iPod touch","-","iPod nano 4g","iPhone 3g","iPod touch 2g","-","iPhone 3gs","iPod nano 5g","iPod touch"};

//----------------------
//mode switching MODE =,,0x00
uint8_t MODE_VOICE_RECORD[6]  = {0xff,0x55,0x03,0x00,0x01,0x01};
uint8_t MODE_SIMPLE_CONTROL[6] = {0xff,0x55,0x03,0x00,0x01,0x02};//exit AIR mode
uint8_t MODE_ADVANCE_REMOTE[6] = {0xff,0x55,0x03,0x00,0x01,0x04};//advance ipod remote
uint8_t REQ_CURRENT_MODE[5]  = {0xff,0x55,0x02,0x00,0x03};
//(response) the current mode number (xx is the mode returned by the iPod),0xff,0x55,0x00,0x04xx
//----------------------
//mode 0x01 = Microphone Lingo
uint8_t VOICE_RECORD_START[6]  = {0xff,0x55,0x03,0x01,0x01,0x00};
uint8_t VOICE_RECORD_STOP[6]  = {0xff,0x55,0x03,0x01,0x01,0x01};

//----------------------
//mode 0x02 = Simple Remote  each button must follow by BUTTON_RELEASE
uint8_t BUTTON_RELEASE[6]  = {0xff,0x55,0x03,0x02,0x00,0x00};
uint8_t BUTTON_PLAYPAUSE[6]  = {0xff,0x55,0x03,0x02,0x00,0x01};
uint8_t BUTTON_VOL_UP[6]  = {0xff,0x55,0x03,0x02,0x00,0x02};
uint8_t BUTTON_VOL_DN[6]  = {0xff,0x55,0x03,0x02,0x00,0x04};
uint8_t BUTTON_NEXT_TRACK[6]  = {0xff,0x55,0x03,0x02,0x00,0x08};
uint8_t BUTTON_PREV_TRACK[6]  = {0xff,0x55,0x03,0x02,0x00,0x10};
//----------------------
//mode 0x04 = Extended Interface
uint8_t TYPE = 0x01;//0x01=Playlist, 0x02=Artist, 0x03=Album, 0x04=Gene 0x05=Track
//uint8_t REQ_IPOD_MODEL[6]  = {0xff,0x55,0x03,0x04,0x00,0x12};
//command 0x00,0x12->resposne 0x00,,0x13
//Gen3 20GB: 0x01 0x02 (0x01 = Gen3 iPod, 0x02 = 20GB ??) (Gen4 30GB: 0x01 0x09) (Gen5 30GB: 0x01 0x09)

//uint8_t REQ_IPOD_NAME[6]  = {0xff,0x55,0x03,0x04,0x00,0x14};
//command 0x00,0x14->response 0x00,0x15

//Switch to the main library playlist (playlist 0)
uint8_t SWITCH_PL_0[6]  = {0xff,0x55,0x03,0x04,0x00,0x16};
//command 0x00,0x16

//Switch to item identified by the number and type given.
uint8_t SWITCH_TYPE_NO[11]  = {0xff,0x55,0x08,0x04,0x00,0x17}; //+ type(1) + number(4)
//command 0x00,0x17 must follow by EXCUTE_PL_JUMP_SONGNO 

//Get Count of the given types (count of playlists, etc)
uint8_t REQ_COUNT_TYPE[7]  = {0xff,0x55,0x04,0x04,0x00,0x18}; //+ type(1)
//command 0x00,0x18 -> Amount of requested type returned ,0x00,0x19 + 4 byte

//Get Names for a range of items, first number is starting item offset (1 for the first item), second number is number of items to retrieve
uint8_t REQ_NAME_TYPE_OFFSET_RANGE[15]  = {0xff,0x55,0x0C,0x04,0x00,0x1A};//+type(1) +number(4) +number(4)
//command 0x00,0x01A -> resonse = String  0x00, 0x1B

//Get time and status info
uint8_t REQ_TIME_STATUS[6]  = {0xff,0x55,0x03,0x04,0x00,0x1C};
//command 0x00,0x01C
//Track length in milliseconds, elapsed time in milliseconds, 
//status=0x0 stop, 0x01 playing, 0x02 paused,0x00,0x1D	length(4) time(4) status(1)

//Get current position in playlist
uint8_t REQ_CUR_POS[6]  = {0xff,0x55,0x03,0x04,0x00,0x1E};
//Command 0x00,0x1E ->Current position in playlist				,0x00,0x1F	position(4)

//Get title of a song number
uint8_t REQ_TITLE_SONG_NO[10]  = {0xff,0x55,0x07,0x04,0x00,0x20};//+number(4)
//title returned as a null terminated string			   ,0x00,0x21	string

//Get artist of a song number
uint8_t REQ_ARTIST_SONG_NO[10]  = {0xff,0x55,0x07,0x04,0x00,0x22};//+number(4)
//Artist returned as a null terminated string			  	,0x00,0x23	string

//Get album of a song number
uint8_t REQ_ALBUM_SONG_NO[10]  = {0xff,0x55,0x07,0x04,0x00,0x24};//+number(4)
//Album returned as a null terminated string			  ,0x00,0x25	string

//Start Polling Mode = 0x01, Stop Polling Mode = 0x00.
uint8_t POLL_START[7]  = {0xff,0x55,0x04,0x04,0x00,0x26,0x01};
//time elapsed on current song	every 500 milliseconds.			,0x00,0x27,0x04,	number(4) 
//Stop Polling
uint8_t POLL_STOP[7]  = {0xff,0x55,0x04,0x04,0x00,0x26,0x00};

//Execute Playlist switch specified in command 0x00 0x17, and jump to specified songnumber in the playlist (0xFFFFFFFF = start at the beginning of the playlist, even when shuffled... probably what you want to use)
uint8_t EXCUTE_PL_JUMP_SONGNO[10]  = {0xff,0x55,0x07,0x04,0x00,0x28};//+	number(4)

//AiR Playback Control. Play/Pause=0x01, Stop=0x02, Skip++=0x03, Skip--=0x04, FFwd=0x05, FRwd=0x06, StopFF/RW=0x07
uint8_t CMD_PLAY_PAUSE[7]  = {0xff,0x55,0x04,0x04,0x00,0x29,0x01};//play,pause
uint8_t CMD_STOP_PLAY[7]  = {0xff,0x55,0x04,0x04,0x00,0x29,0x02};//stop
uint8_t CMD_NEXT_TRACK[7]  = {0xff,0x55,0x04,0x04,0x00,0x29,0x03};//next track
uint8_t CMD_PREV_TRACK[7]  = {0xff,0x55,0x04,0x04,0x00,0x29,0x04};//prev track
uint8_t CMD_FAST_FORWARD[7]  = {0xff,0x55,0x04,0x04,0x00,0x29,0x05};//fast forward
uint8_t CMD_FAST_REVERSE[7]  = {0xff,0x55,0x04,0x04,0x00,0x29,0x06};//fast reverse
uint8_t CMD_STOP_FAST[7]  = {0xff,0x55,0x04,0x04,0x00,0x29,0x07};//stop fast forward or reverse

//Get Shuffle Mode
uint8_t REQ_SHUFFLE_MODE[6]  = {0xff,0x55,0x03,0x04,0x00,0x2C};
//Returns current Shuffle mode: Off = 0x00, Songs = 0x01, Albums = 0x02			,0x04,0x00,0x2D	shufflemode(1)

//Sets the shuffle mode. Off = 0x00, Songs = 0x01, Albums = 0x02.
uint8_t SET_SHUFFLE_MODE[7]  = {0xff,0x55,0x04,0x04,0x00,0x2E};//mode (1)

//Get Repeat Mode
uint8_t REQ_REPEAT_MODE[6]  = {0xff,0x55,0x03,0x04,0x00,0x2F};
//Returns current Repeat mode: Off = 0x00, One song = 0x01, All songs = 0x02			,0x04,0x00,0x30	repeatmode(1)

//Sets the repeat mode. Off = 0x00, One song = 0x01, All songs = 0x02
uint8_t SET_REPEAT_MODE[7]  = {0xff,0x55,0x04,0x04,0x00,0x31};//mode (1)

//Set Display Image of Accessory
//uint8_t SET_DISPLAY_IMAGE[500] = {0xff,0x55,0x00,0xnn,0xnn,0x04,0x00,0x32,0x00,0x00,0x01,0x00,0x64,0x00,0x64,0x02,0x07,0x01,0x00,0xdata};

//get max display image size 
//uint8_t GET_MONO_DISP_LIMIT[7] = {0xff,0x55,0x04,0x04,0x00,0x33};
//return 0x00,0x34,width1,width2,height1,height2,format (0x01=mono,0x02=RGB565littleIndian,0x03=RGBbigindian)

//Get number of songs in current playlist
uint8_t REQ_NO_SONG_CUR_PL[6]  = {0xff,0x55,0x03,0x04,0x00,0x35};
//Number of songs in current playlist		 	       ,0x04,0x00,0x36	number(4)

//Jump to specified Songnumber in the current playlist
uint8_t JUMP_SONG_NO[10]  = {0xff,0x55,0x07,0x04,0x00,0x37};//+	number(4)

//----------------
//mode 0x0C  lingo storeage
uint8_t REQ_STORAGE_SIZE[6] = {0xff,0x55,0x02,0x0C,0x01};//get storage size
